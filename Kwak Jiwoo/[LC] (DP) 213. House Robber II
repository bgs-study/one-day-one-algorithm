// 배열은 첫번째와 마지막 원소가 만나는 원 형태임. 인접한 2곳을 방문하지 않으면서 모을 수 있는 큰 수를 구하시오.

// nums[0]과 nums[마지막]이 만나있으니 둘 중 하나만 방문할 수 있음
// -> nums[0] ~ nums[마지막-1]의 dp1배열, nums[1] ~ nums[마지막]의 dp2배열을 구함
// => dp1[마지막-1], dp2[마지막] 중 최대값 반환

var rob = function(nums) {
    
    if(nums.length <= 3) return Math.max(...nums)
    let length = nums.length-1;

    // nums[0] 방문하는 dp
    let dp1 = Array(nums.length).fill(0);
    // nums[nums.length-1] 방문하는 dp
    let dp2 = Array(nums.length).fill(0);
    
    // 초기값 세팅
    dp1[0] = nums[0];
    dp1[1] = Math.max(nums[0], nums[1]);
    dp2[1] = nums[1];
    dp2[2] = Math.max(nums[1], nums[2]);
    
    // dp1 채워넣기 (nums[0] ~ nums[마지막-1])
    for(let i = 2; i <= length-1; i++) {
            
        dp1[i] = Math.max(dp1[i-2] + nums[i], dp1[i-1]);
    }
    
    // dp2 채워넣기 (nums[1] ~ nums[마지막])
    for(let i = 3; i <= length; i++) {
            
        dp2[i] = Math.max(dp2[i-2] + nums[i], dp2[i-1]);
    }

    return Math.max(dp1[length-1], dp2[length]);
    
};

// 71ms, 42.1mb
